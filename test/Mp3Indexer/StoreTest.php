<?php
/**
 * runtime tests
 *
 * PHP Version 5
 *
 * @category  Test
 * @package   Mp3Indexer
 * @author    Lucas S. Bickel <hairmare@purplehaze.ch>
 * @copyright 2012 - Alle Rechte vorbehalten
 * @license   GPL http://www.gnu.org/licenses/gpl-3.0.txt
 * @link      http://github.com/purplehazech/mp3-indexer
 */

require_once __DIR__.'/../../src/Mp3Indexer/Store.php';

require_once 'PHPUnit/Extensions/Database/Operation/IDatabaseOperation.php';
require_once 'PHPUnit/Extensions/Database/Operation/Factory.php';
require_once 'PHPUnit/Extensions/Database/Operation/Null.php';
require_once 'PHPUnit/Extensions/Database/DataSet/IDataSet.php';
require_once 'PHPUnit/Extensions/Database/DataSet/AbstractDataSet.php';
require_once 'PHPUnit/Extensions/Database/DataSet/QueryDataSet.php';
require_once 'PHPUnit/Extensions/Database/DataSet/ITable.php';
require_once 'PHPUnit/Extensions/Database/DataSet/AbstractTable.php';
require_once 'PHPUnit/Extensions/Database/DataSet/QueryTable.php';
require_once 'PHPUnit/Extensions/Database/DB/IMetaData.php';
require_once 'PHPUnit/Extensions/Database/DB/MetaData.php';
require_once 'PHPUnit/Extensions/Database/DB/MetaData/MySQL.php';
require_once 'PHPUnit/Extensions/Database/DB/IDatabaseConnection.php';
require_once 'PHPUnit/Extensions/Database/DB/DefaultDatabaseConnection.php';
require_once 'PHPUnit/Extensions/Database/ITester.php';
require_once 'PHPUnit/Extensions/Database/AbstractTester.php';
require_once 'PHPUnit/Extensions/Database/DefaultTester.php';
require_once 'PHPUnit/Extensions/Database/TestCase.php';

/**
 * Test class for Mp3Indexer_Store.
 * Generated by PHPUnit on 2012-05-21 at 05:09:07.
 *
 * PHP Version 5
 *
 * @category Test
 * @package  Mp3Indexer
 * @author   Lucas S. Bickel <hairmare@purplehaze.ch>
 * @license  GPL http://www.gnu.org/licenses/gpl-3.0.txt
 * @link     http://github.com/purplehazech/mp3-indexer
 */
class Mp3Indexer_StoreTest extends PHPUnit_Extensions_Database_TestCase
{
    /**
     * @var Mp3Indexer_Store
     */
    protected $object;

    /**
     * only instantiate pdo once for test clean-up/fixture load
     *
     * @var PDO
     */
    static private $_pdo = null;

    /**
     * only instantiate once per test
     * 
     * @var PHPUnit_Extensions_Database_DB_IDatabaseConnection
     */
    private $_conn = null;

    /**
     * create PDO connection to test database
     *
     * @return PDO
     */
    final public function getConnection()
    {
        if ($this->_conn === null) {
            if (self::$_pdo == null) {
                self::$_pdo = new PDO(
                    $GLOBALS['DB_DSN'],
                    $GLOBALS['DB_USER'],
                    $GLOBALS['DB_PASSWD']
                );
            }
            $this->_conn = $this->createDefaultDBConnection(
                self::$_pdo, $GLOBALS['DB_DBNAME']
            );
        }

        return $this->_conn;
    }

    /**
     * flush tables for an empty dataset
     * 
     * @return PHPUnit_Extensions_Database_DataSet_QueryDataSet
     */
    protected function getDataSet()
    {
        $dataSet = new PHPUnit_Extensions_Database_DataSet_QueryDataSet(
            $this->getConnection()
        );
        $dataSet->addTable('audioFile');
        $dataSet->addTable('id3Tag');
        return $dataSet;
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->dispatcherMock = $this
            ->getMockBuilder('sfEventDispatcher')
            ->getMock();
        $this->eventMock = $this
            ->getMockBuilder('sfEvent')
            ->disableOriginalConstructor()
            ->getMock();
        $this->textFrameMock = $this
            ->getMockBuilder('Zend_Media_Id3_TextFrame')
            ->setMethods(
                array(
                    'getIdentifier',
                    'getTexts'
                )
            )
            ->getMock();

        $this->getConnection();

        $this->object = new Mp3Indexer_Store(
            $this->dispatcherMock,
            self::$_pdo,
            $this->eventMock
        );
    }

    /**
     * test public method and private dependants
     *
     * @covers Mp3Indexer_Store
     *
     * @todo Implement testCreateOrUpdate().
     *
     * @return void
     */
    public function testCreateOrUpdate()
    {
        $this->getDataset();

        $this->textFrameMock
            ->expects($this->exactly(2))
            ->method('getIdentifier')
            ->will($this->returnValue('TST'));
        $this->textFrameMock
            ->expects($this->exactly(2))
            ->method('getTexts')
            ->will($this->returnValue(array('Hello World!')));

        $event = clone $this->eventMock;
        $event->file = 'testbase/testfile';
        $event->data = array(
            $this->textFrameMock
        );

        $this->assertTrue(
            $this->object->createOrUpdate(
                $event
            )
        );

        $this->assertTrue(
            $this->object->createOrUpdate(
                $event
            )
        );

        $this->assertEquals(1, $this->getConnection()->getRowCount('audioFile'));
    }

    /**
     * test public method and private dependants
     *
     * @covers Mp3Indexer_Store::createOrUpdate
     * @covers Mp3Indexer_Store::_prepareStatements
     *
     * @todo Implement testCreateOrUpdate().
     *
     * @return void
     */
    public function testCreateOrUpdateException()
    {
        $event = clone $this->eventMock;
        $event->data = array();

        $this->dispatcherMock
            ->expects($this->exactly(2))
            ->method('notify');

        $event->file = null;
        $this->assertFalse(
            $this->object->createOrUpdate(
                $event
            ),
            "no file given"
        );

        $event->file = 'base/file';
        $this->assertFalse(
            $this->object->createOrUpdate(
                $event
            ),
            "no data in event"
        );
    }
}
