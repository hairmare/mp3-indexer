<?php
/**
 * runtime tests
 *
 * PHP Version 5
 *
 * @category  Test
 * @package   Mp3Indexer
 * @author    Lucas S. Bickel <hairmare@purplehaze.ch>
 * @copyright 2012 - Alle Rechte vorbehalten
 * @license   GPL http://www.gnu.org/licenses/gpl-3.0.txt
 * @link      http://github.com/purplehazech/mp3-indexer
 */

require_once __DIR__.'/../../src/Mp3Indexer/AudioFileRecursiveFilterIterator.php';

/**
 * Test class for Mp3Indexer_AudioFileRecursiveFilterIterator.
 * Generated by PHPUnit on 2012-05-20 at 19:53:54.
 *
 * @category Test
 * @package  Mp3Indexer
 * @author   Lucas S. Bickel <hairmare@purplehaze.ch>
 * @license  GPL http://www.gnu.org/licenses/gpl-3.0.txt
 * @link     http://github.com/purplehazech/mp3-indexer
 */
class Mp3Indexer_AudioFileRecursiveFilterIteratorTest
    extends PHPUnit_Framework_TestCase
{
    /**
     * @var Mp3Indexer_AudioFileRecursiveFilterIterator
     */
    var $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->recursorMock = $this->getMockBuilder('RecursiveDirectoryIterator')
            ->disableOriginalConstructor()->getMock();

        $this->object = new Mp3Indexer_AudioFileRecursiveFilterIterator(
            $this->recursorMock
        );
    }

    /**
     * check if accept method behaves
     *
     * @covers Mp3Indexer_AudioFileRecursiveFilterIterator::accept
     *
     * @return void
     */
    public function testAccept()
    {
        $this->recursorMock
            ->expects($this->any())
            ->method('hasChildren')
            ->will($this->onConsecutiveCalls(true, false, false));

        $this->assertTrue($this->object->accept('test'));
        $this->assertTrue($this->object->accept('test.mp3'));
        $this->assertFalse($this->object->accept('test.php'));
    }
}
