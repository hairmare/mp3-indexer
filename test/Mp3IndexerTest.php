<?php
/**
 * runtime tests
 *
 * PHP Version 5
 *
 * @category  Test
 * @package   Mp3Indexer
 * @author    Lucas S. Bickel <hairmare@purplehaze.ch>
 * @copyright 2012-2013 - Alle Rechte vorbehalten
 * @license   GPL http://www.gnu.org/licenses/gpl-3.0.txt
 * @link      http://github.com/purplehazech/mp3-indexer
 */


require_once __DIR__.'/../src/Mp3Indexer.php';

/**
 * Test class for Mp3Indexer.
 * Generated by PHPUnit on 2012-05-19 at 14:20:35.
 *
 * @category Test
 * @package  Mp3Indexer
 * @author   Lucas S. Bickel <hairmare@purplehaze.ch>
 * @license  GPL http://www.gnu.org/licenses/gpl-3.0.txt
 * @link     http://github.com/purplehazech/mp3-indexer
 */
class Mp3IndexerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Mp3Indexer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @return void
     */
    protected function setUp()
    {
        $this->scannerMock = $this->getMockBuilder('Mp3Indexer_Scanner')
            ->disableOriginalConstructor()
            ->getMock();
        $this->readerMock = $this->getMockBuilder('Mp3Indexer_Reader')
            ->disableOriginalConstructor()
            ->getMock();
        $this->storeMock = $this->getMockBuilder('Mp3Indexer_Store')
            ->disableOriginalConstructor()
            ->getMock();
        $this->linterMock = $this->getMockBuilder('stclass')
            ->disableOriginalConstructor()
            ->getMock();

        $this->object = new Mp3Indexer(
            $this->scannerMock,
            $this->readerMock,
            $this->storeMock,
            array(
                $this->linterMock
            )
        );
    }

    /**
     * test object creation
     *
     * @covers Mp3Indexer::__construct
     *
     * @return void
     */
    public function testConstructor()
    {
        new Mp3Indexer(
            $this->scannerMock,
            $this->readerMock,
            $this->storeMock,
            array(
                $this->linterMock
            )
        );
    }

    /**
     * check for scanner call
     *
     * @covers Mp3Indexer::run
     *
     * @return void
     */
    public function testRun()
    {
        $this->scannerMock
            ->expects($this->once())
            ->method('scan');

        $this->object->run();
    }
}
