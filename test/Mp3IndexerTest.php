<?php

require_once __DIR__.'/../src/Mp3Indexer.php';

/**
 * Test class for Mp3Indexer.
 * Generated by PHPUnit on 2012-05-19 at 14:20:35.
 */
class Mp3IndexerTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var Mp3Indexer
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->scannerMock = $this->getMockBuilder('Mp3Indexer_Scanner')
            ->disableOriginalConstructor()
            ->getMock();
        $this->readerMock = $this->getMockBuilder('Mp3Indexer_Reader')
            ->disableOriginalConstructor()
            ->getMock();
        $this->storeMock = $this->getMockBuilder('Mp3Indexer_Store')
            ->disableOriginalConstructor()
            ->getMock();
        $this->linterMock = $this->getMockBuilder('stclass')
            ->disableOriginalConstructor()
            ->getMock();

        $this->object = new Mp3Indexer(
            $this->scannerMock,
            $this->readerMock,
            $this->storeMock,
            array(
                $this->linterMock
            )
        );
     }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @covers Mp3Indexer::__construct
     */
    public function testConstructor()
    {
        new Mp3Indexer(
            $this->scannerMock,
            $this->readerMock,
            $this->storeMock,
            array(
                $this->linterMock
            )
        );
    }

    /**
     * @covers Mp3Indexer::addLogger
     */
    public function testAddLogger()
    {
        $loggerMock = $this->getMockBuilder('Mp3Indexer_Log_Interface')->getMock();

        $this->object->addLogger($loggerMock);

        $this->assertSame($this->object->_loggerStack[0], $loggerMock);
    }

    /**
     * @covers Mp3Indexer::run
     */
    public function testRun()
    {
        $this->scannerMock
            ->expects($this->once())
            ->method('scan');

        $this->object->run();
    }
}
